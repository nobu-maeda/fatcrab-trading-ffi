namespace FatCrabTrading {};

[Error]
interface FatCrabError {
  TxNotFound();
  TxUnconfirmed();
  Simple(string description);
  N3xb(string description);
  BdkBip39(string description);
  Bdk(string description);
  Io(string description);
  JoinError(string description);
  SerdesJson(string description);
  UrlParse(string description);
  MpscSend(string description);
  OneshotRecv(string description);
};

[Enum]
interface Auth {
  None();
  UserPass(string username, string password);
  Cookie(string file);
};

enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

[Enum]
interface BlockchainInfo {
  Electrum(string url, Network network);
  Rpc(string url, Auth auth, Network network);
};

dictionary RelayAddr {
  string url;
  string? socket_addr;
};

enum RelayStatus {
    "Initialized",
    "Pending",
    "Connecting",
    "Connected",
    "Disconnected",
    "Stopped",
    "Terminated",
};

dictionary RelayInformationDocument {
  string? name;
  string? description;
  string? pubkey;
  string? contact;
  sequence<u16>? supported_nips;
  string? software;
  string? version;
  sequence<string> relay_countries;
  sequence<string> language_tags;
  sequence<string> tags;
  string? posting_policy;
  string? payments_url;
  string? icon;
};

dictionary RelayInfo {
  string url;
  RelayStatus status;
  RelayInformationDocument document;
};

enum FatCrabOrderType {
  "Buy",
  "Sell",
};

enum FatCrabTradeRspType {
  "Accept",
  "Reject",
};

dictionary FatCrabOrder {
  FatCrabOrderType order_type;
  string trade_uuid;
  f64 amount;
  f64 price;
};

[Enum]
interface FatCrabTradeRsp {
  Accept(string receive_address);
  Reject();
};

dictionary FatCrabPeerMessage {
  string receive_address;
  string txid;
};

interface FatCrabOrderEnvelope {
  FatCrabOrder order();
};

interface FatCrabOfferEnvelope {

};

interface FatCrabTradeRspEnvelope {
  FatCrabTradeRsp trade_rsp();
};

interface FatCrabPeerEnvelope {
  FatCrabPeerMessage message();
};

dictionary FatCrabMakerNotifOfferStruct {
  FatCrabMakerState state;
  FatCrabOfferEnvelope offer_envelope;
};

dictionary FatCrabMakerNotifPeerStruct {
  FatCrabMakerState state;
  FatCrabPeerEnvelope peer_envelope;
};

[Trait]
interface FatCrabMakerNotifDelegate {
  void on_maker_offer_notif(FatCrabMakerNotifOfferStruct offer_notif);
  void on_maker_peer_notif(FatCrabMakerNotifPeerStruct peer_notif);
};

dictionary FatCrabTakerNotifTradeRspStruct {
  FatCrabTakerState state;
  FatCrabTradeRspEnvelope trade_rsp_envelope;
};

dictionary FatCrabTakerNotifPeerStruct {
  FatCrabTakerState state;
  FatCrabPeerEnvelope peer_envelope;
};

[Trait]
interface FatCrabTakerNotifDelegate {
  void on_taker_trade_rsp_notif(FatCrabTakerNotifTradeRspStruct trade_rsp_notif);
  void on_taker_peer_notif(FatCrabTakerNotifPeerStruct peer_notif);
};

enum FatCrabMakerState {
  "New",
  "WaitingForOffers",
  "ReceivedOffer",
  "AcceptedOffer",
  "InboundBtcNotified",
  "InboundFcNotified",
  "NotifiedOutbound",
  "TradeCompleted",
};

interface FatCrabBuyMaker {
  [Throws=FatCrabError]
  FatCrabMakerState post_new_order();
  [Throws=FatCrabError]
  FatCrabOrder get_order_details();
  [Throws=FatCrabError]
  FatCrabMakerState get_state();
  [Throws=FatCrabError]
  sequence<FatCrabOfferEnvelope> query_offers();
  [Throws=FatCrabError]
  FatCrabPeerEnvelope? query_peer_msg();
  [Throws=FatCrabError]
  FatCrabMakerState trade_response(FatCrabTradeRspType trade_rsp_type, FatCrabOfferEnvelope offer_envelope);
  [Throws=FatCrabError]
  FatCrabMakerState release_notify_peer();
  [Throws=FatCrabError]
  FatCrabMakerState trade_complete();
  [Throws=FatCrabError]
  void register_notif_delegate(FatCrabMakerNotifDelegate delegate);
  [Throws=FatCrabError]
  void unregister_notif_delegate();
};

interface FatCrabSellMaker {
  [Throws=FatCrabError]
  FatCrabMakerState post_new_order();
  [Throws=FatCrabError]
  FatCrabOrder get_order_details();
  [Throws=FatCrabError]
  FatCrabMakerState get_state();
  [Throws=FatCrabError]
  sequence<FatCrabOfferEnvelope> query_offers();
  [Throws=FatCrabError]
  FatCrabPeerEnvelope? query_peer_msg();
  [Throws=FatCrabError]
  FatCrabMakerState trade_response(FatCrabTradeRspType trade_rsp_type, FatCrabOfferEnvelope offer_envelope);
  [Throws=FatCrabError]
  u32 check_btc_tx_confirmation();
  [Throws=FatCrabError]
  FatCrabMakerState notify_peer(string fatcrab_txid);
  [Throws=FatCrabError]
  FatCrabMakerState trade_complete();
  [Throws=FatCrabError]
  void register_notif_delegate(FatCrabMakerNotifDelegate delegate);
  [Throws=FatCrabError]
  void unregister_notif_delegate();
};

enum FatCrabTakerState {
  "New",
  "SubmittedOffer",
  "OfferAccepted",
  "OfferRejected",
  "NotifiedOutbound",
  "InboundBtcNotified",
  "InboundFcNotified",
  "TradeCompleted",
};

interface FatCrabBuyTaker {
  [Throws=FatCrabError]
  FatCrabTakerState take_order();
  [Throws=FatCrabError]
  FatCrabOrderEnvelope get_order_details();
  [Throws=FatCrabError]
  FatCrabTakerState get_state();
  [Throws=FatCrabError]
  FatCrabTradeRspEnvelope? query_trade_rsp();
  [Throws=FatCrabError]
  FatCrabTakerState notify_peer(string fatcrab_txid);
  [Throws=FatCrabError]
  u32 check_btc_tx_confirmation();
  [Throws=FatCrabError]
  FatCrabTakerState trade_complete();
  [Throws=FatCrabError]
  void register_notif_delegate(FatCrabTakerNotifDelegate delegate);
  [Throws=FatCrabError]
  void unregister_notif_delegate();
};

interface FatCrabSellTaker {
  [Throws=FatCrabError]
  FatCrabTakerState take_order();
  [Throws=FatCrabError]
  FatCrabOrderEnvelope get_order_details();
  [Throws=FatCrabError]
  FatCrabTakerState get_state();
  [Throws=FatCrabError]
  FatCrabTakerState trade_complete();
  [Throws=FatCrabError]
  void register_notif_delegate(FatCrabTakerNotifDelegate delegate);
  [Throws=FatCrabError]
  void unregister_notif_delegate();
};

interface FatCrabTrader {
    constructor(BlockchainInfo info, string app_dir_path);
    [Name=new_with_mnemonic]
    constructor(string mnemonic, BlockchainInfo info, string app_dir_path);
    [Throws=FatCrabError]
    string wallet_bip39_mnemonic();
    [Throws=FatCrabError]
    u64 wallet_spendable_balance();
    [Throws=FatCrabError]
    u64 wallet_allocated_amount();
    [Throws=FatCrabError]
    string wallet_generate_receive_address();
    [Throws=FatCrabError]
    string wallet_send_to_address(string address, u64 amount);
    [Throws=FatCrabError]
    void wallet_blockchain_sync();
    string nostr_pubkey();
    [Throws=FatCrabError]
    void add_relays(sequence<RelayAddr> relay_addrs);
    sequence<RelayInfo> get_relays();
    [Throws=FatCrabError]
    void remove_relay(string url);
    [Throws=FatCrabError]
    void reconnect();
    [Throws=FatCrabError]
    FatCrabBuyMaker new_buy_maker(FatCrabOrder order, string fatcrab_rx_addr);
    [Throws=FatCrabError]
    FatCrabSellMaker new_sell_maker(FatCrabOrder order);
    [Throws=FatCrabError]
    sequence<FatCrabOrderEnvelope> query_orders(FatCrabOrderType? order_type);
    [Throws=FatCrabError]
    FatCrabBuyTaker new_buy_taker(FatCrabOrderEnvelope order_envelope);
    [Throws=FatCrabError]
    FatCrabSellTaker new_sell_taker(FatCrabOrderEnvelope order_envelope, string fatcrab_rx_addr);
    record<string, FatCrabBuyMaker> get_buy_makers();
    record<string, FatCrabSellMaker> get_sell_makers();
    record<string, FatCrabBuyTaker> get_buy_takers();
    record<string, FatCrabSellTaker> get_sell_takers();
    [Throws=FatCrabError]
    void shutdown();
};